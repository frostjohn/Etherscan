import json
import requests
from requests.exceptions import HTTPError
from datetime import datetime
from config import ENDPOINT
from skale.utils.helper import init_default_logger
from web3 import Web3
import logging
logger = logging.getLogger(__name__)
now = datetime.now()
init_default_logger()
web3 = Web3(Web3.HTTPProvider(ENDPOINT))
def get_response( api_call):
    response = requests.get(api_call)
    response.raise_for_status()
    jsonResponse = response.json()
    d2 = json.loads(json.dumps(jsonResponse))
    d3 = json.loads(json.dumps(d2["result"]))
    return d3
def api_link():
    return 'https://api.etherscan.io/api?module=account' \
           '&action=txlist' \
           '&address=0x4d5f2faafaaee5c49428a6ee567f280121c9da85' \
           '&startblock=0' \
           '&endblock=99999999' \
           '&sort=asc&apikey=EY54ZFWWAJTYGBKDYC2PHMABIB8WPRUP86'
try:
    api_call = api_link()
    logger.info(f'api_call : {api_call}')
    d3 = get_response(api_call)
    values = []
    ids = set([])
    if len(d3) > 0:
        print(len(d3))
        for tx in d3:
            last_block_num = tx["blockNumber"]
            tx_input = web3.toText(tx["input"])
            tx_from =  tx["from"] #put your own Address
            tx_to =  tx["to"] #put your own Address
            print("Input for transaction: ",tx_from,tx_to, tx_input)
             # initialize web3 with SKALE 
             # prepare a transaction with from and to with your addresses
             #put the input
             #fire the transaction on skale chain
    else:
        logger.info(f'No new transactions')
except HTTPError as http_err:
    logger.error(f'Transaction execution failed because of a HTTP error. {http_err}')
except Exception as err:
    logger.error(f'Transaction execution failed. {err}')
logger.info(f'Completed...')
